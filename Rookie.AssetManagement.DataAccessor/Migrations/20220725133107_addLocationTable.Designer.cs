// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rookie.AssetManagement.DataAccessor.Data;

#nullable disable

namespace Rookie.AssetManagement.DataAccessor.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220725133107_addLocationTable")]
    partial class addLocationTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "ff202140-f854-4557-a78f-0c20557fbf53",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "4945c745-edc7-4378-ab30-6cab5ddd611d",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Location", b =>
                {
                    b.Property<string>("LocationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationID = "HN",
                            LocationName = "Ha Noi"
                        },
                        new
                        {
                            LocationID = "HCM",
                            LocationName = "Ho Chi Minh"
                        });
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLogged")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffCode")
                        .HasMaxLength(6)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(6)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LocationID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cefb8c99-02e8-4672-83c1-b5d6c8e577d7",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1989, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Thong",
                            Gender = "F",
                            IsLogged = true,
                            JoinedDate = new DateTime(2015, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Hoang",
                            LocationID = "HCM",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "thongnh",
                            PasswordHash = "AQAAAAEAACcQAAAAEMackweE8G3D+uQ2vFVe+pSH3WCrBVEs3/+W+yb4/JnVvPBc4D8I93J2F/sW9wgKiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7WE4A7DTOM5DETPA35OHKTOZMMYP",
                            StaffCode = "SD1001",
                            TwoFactorEnabled = false,
                            UserName = "thongnh"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f0c4739-c6ea-4918-811d-5c4681999a53",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1983, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Canh",
                            Gender = "M",
                            IsLogged = false,
                            JoinedDate = new DateTime(2018, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Ho Minh",
                            LocationID = "HCM",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "canhhm",
                            PasswordHash = "AQAAAAEAACcQAAAAEDy1mfCNQEKcmd/XM5mbkaOw1YF+BBcjF6D/P7V9VAQso3GxX45XDrOci40/e2QAnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7RTOM5DETPA35OHKTOZMMYP",
                            StaffCode = "SD1002",
                            TwoFactorEnabled = false,
                            UserName = "canhhm"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c54b822-4e38-4846-86b5-641ccb378afa",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1987, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Khanh",
                            Gender = "F",
                            IsLogged = false,
                            JoinedDate = new DateTime(2020, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Tran Bao",
                            LocationID = "HN",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "khanhntb",
                            PasswordHash = "AQAAAAEAACcQAAAAEIUyb0SEdlALMOafpKlSzmFeulU+W96Il6JREfYRq8YBsBTjR4HGFbu+nre2C818Aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTYM5DETPA35OHKTOZMMYP",
                            StaffCode = "SD1003",
                            TwoFactorEnabled = false,
                            UserName = "khanhntb"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5718306-e6fa-4b48-a20e-90a67e31293c",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1983, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Sang",
                            Gender = "F",
                            IsLogged = false,
                            JoinedDate = new DateTime(2018, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Vinh",
                            LocationID = "HN",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "sangnv",
                            PasswordHash = "AQAAAAEAACcQAAAAEKE094RhbLEd5spnvtfkGOdoZWKbRclmnV/9TbWmb7LtF9cBEgYHlJ8ENskRZzlPTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOJ5DETPA35OHKTOZMMYP",
                            StaffCode = "SD1005",
                            TwoFactorEnabled = false,
                            UserName = "sangnv"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2a4cd1b-ed2f-4f05-87da-e91edccd11a0",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1980, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Nhut",
                            Gender = "M",
                            IsLogged = true,
                            JoinedDate = new DateTime(2020, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Tran Minh",
                            LocationID = "HN",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "nhuttm",
                            PasswordHash = "AQAAAAEAACcQAAAAEF9wrKJYdhNx03+xyk/2oC4Xl/hcsDQxG+pxVDk1SyJGwWBJR5FdPPXXjr1xuTO32g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4R7DTOM5DETPA35OHKTOZMMYP",
                            StaffCode = "SD1006",
                            TwoFactorEnabled = false,
                            UserName = "nhuttm"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8050098-6b96-4091-9591-98f05f43e83a",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1987, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Van",
                            Gender = "F",
                            IsLogged = true,
                            JoinedDate = new DateTime(2016, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Ngoc Gia",
                            LocationID = "HN",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "Vannng",
                            PasswordHash = "AQAAAAEAACcQAAAAEKFkSaDWZhHVER63rBSAMrTSPNsloZhOVe1fQ1V6Cy3DO6SzxhBXBt9SlBpPDqVf0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOM5DHTPA35OHKTOZMMYP",
                            StaffCode = "SD1007",
                            TwoFactorEnabled = false,
                            UserName = "Vannng"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9cd1d18-0839-483d-97c9-1f71ae68f8b7",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1987, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Thang",
                            Gender = "F",
                            IsLogged = false,
                            JoinedDate = new DateTime(2016, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Viet",
                            LocationID = "HN",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "thangnv",
                            PasswordHash = "AQAAAAEAACcQAAAAELNSny3nbmnQgAf5cRK5TnxS/+Buxlarpc8aaxtUFha1V3GU8xLlr5D1GMUHiZBshQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOM5DETPA35OMKTOZMMYP",
                            StaffCode = "SD1008",
                            TwoFactorEnabled = false,
                            UserName = "thangnv"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "433ffd96-ad1c-4d82-a471-32e34f0f13b2",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1984, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Toan",
                            Gender = "M",
                            IsLogged = false,
                            JoinedDate = new DateTime(2017, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Le Hang",
                            LocationID = "HCM",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "toanlh",
                            PasswordHash = "AQAAAAEAACcQAAAAEFQlpA1qAXoBpAVJlofTkB345ylbEJw7sKUDM8ENXOjWL7XVD5a4yIDs+MQ/kV7APA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOM5DETPA35OHKTOZBMYP",
                            StaffCode = "SD1009",
                            TwoFactorEnabled = false,
                            UserName = "toanlh"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "230faf04-b80e-45a1-9d2e-221119848277",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1981, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Quy",
                            Gender = "M",
                            IsLogged = false,
                            JoinedDate = new DateTime(2017, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Bui Duy",
                            LocationID = "HCM",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "quybd",
                            PasswordHash = "AQAAAAEAACcQAAAAECbTr0Rjm97NdeuuwkcqZ1W9MpXVdk47Xlht5Kj56NiBI9UOqmzaocIVovs7WJkW+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOM5DETPA35OHKTOZMMYP",
                            StaffCode = "SD1010",
                            TwoFactorEnabled = false,
                            UserName = "quybd"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d1610c3-83f0-4def-92e8-852f954e0865",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1986, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Phuong",
                            Gender = "F",
                            IsLogged = false,
                            JoinedDate = new DateTime(2018, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Vo Hoang",
                            LocationID = "HCM",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "phuongvh",
                            PasswordHash = "AQAAAAEAACcQAAAAEPjg/09ROVu0GWWAZXRntxWDfaRlGEx8nNE6ROOXM+28UPT5PuiwbTfne1QOtWTsmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOM5DETPA35OHKTOWMMYP",
                            StaffCode = "SD1011",
                            TwoFactorEnabled = false,
                            UserName = "phuongvh"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.User", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationID");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Location", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
