// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rookie.AssetManagement.DataAccessor.Data;

#nullable disable

namespace Rookie.AssetManagement.DataAccessor.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220726115252_addPasswordSaltField")]
    partial class addPasswordSaltField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "3836efe7-8bef-4bb4-a6ac-801ee8467e5a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "07b98b1d-e7ef-4737-900b-95380cff0c07",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Location", b =>
                {
                    b.Property<string>("LocationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationID = "HN",
                            LocationName = "Ha Noi"
                        },
                        new
                        {
                            LocationID = "HCM",
                            LocationName = "Ho Chi Minh"
                        });
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLogged")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffCode")
                        .HasMaxLength(6)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(6)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LocationID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d9056c7-5e0f-40ba-a4d2-740bf3f405cf",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1989, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Thong",
                            Gender = "F",
                            IsLogged = true,
                            JoinedDate = new DateTime(2015, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Hoang",
                            LocationID = "HCM",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "thongnh",
                            PasswordHash = "AQAAAAEAACcQAAAAEOECRUlKULZAFXAg09g5orfm8RheLkzlnzlHYlLl99+xip1Pz1PG7AscXVohuXU2gg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7WE4A7DTOM5DETPA35OHKTOZMMYP",
                            StaffCode = "SD1001",
                            TwoFactorEnabled = false,
                            UserName = "thongnh"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffb6a2f8-95c9-4d57-9394-4c45601781c5",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1983, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Canh",
                            Gender = "M",
                            IsLogged = false,
                            JoinedDate = new DateTime(2018, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Ho Minh",
                            LocationID = "HCM",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "canhhm",
                            PasswordHash = "AQAAAAEAACcQAAAAEGgOdZHReacdFkTFpxyAJYEOSp3a96XbXT9aqSm9JLG7069WoxD2YlMvl9ll3BB2Qw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7RTOM5DETPA35OHKTOZMMYP",
                            StaffCode = "SD1002",
                            TwoFactorEnabled = false,
                            UserName = "canhhm"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18e27e58-f1ce-4476-b564-5816f3cd8269",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1987, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Khanh",
                            Gender = "F",
                            IsLogged = false,
                            JoinedDate = new DateTime(2020, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Tran Bao",
                            LocationID = "HN",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "khanhntb",
                            PasswordHash = "AQAAAAEAACcQAAAAEC5EeC6wRaiyDcMk53sYAbCmP+F2U0kx/DqQAxpj4hJS94EFYaJN0WZxxppk+rHirA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTYM5DETPA35OHKTOZMMYP",
                            StaffCode = "SD1003",
                            TwoFactorEnabled = false,
                            UserName = "khanhntb"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "883d8b57-9ebe-4547-9f19-98331e7c4121",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1983, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Sang",
                            Gender = "F",
                            IsLogged = false,
                            JoinedDate = new DateTime(2018, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Vinh",
                            LocationID = "HN",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "sangnv",
                            PasswordHash = "AQAAAAEAACcQAAAAEJY0wJhJ7a9kIV4PrLhmaQfFbYecdjZEuF5Ii3ltql+bYIBLzrNzgRjwfUuo0q4w1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOJ5DETPA35OHKTOZMMYP",
                            StaffCode = "SD1005",
                            TwoFactorEnabled = false,
                            UserName = "sangnv"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c33d663e-351a-4998-aeeb-b2edd7da19d5",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1980, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Nhut",
                            Gender = "M",
                            IsLogged = true,
                            JoinedDate = new DateTime(2020, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Tran Minh",
                            LocationID = "HN",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "nhuttm",
                            PasswordHash = "AQAAAAEAACcQAAAAEFj6kH5aRqN6gFPSQePH/tZoEQ/IcEb13tgRf+N/OCLwcRePnKfS8KrsdnShuB7CLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4R7DTOM5DETPA35OHKTOZMMYP",
                            StaffCode = "SD1006",
                            TwoFactorEnabled = false,
                            UserName = "nhuttm"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85fca277-0a8e-457c-bb46-bfec092a7fdd",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1987, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Van",
                            Gender = "F",
                            IsLogged = true,
                            JoinedDate = new DateTime(2016, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Ngoc Gia",
                            LocationID = "HN",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "Vannng",
                            PasswordHash = "AQAAAAEAACcQAAAAEDvGQIG2mUWCUF953FT213fyPTMRpeDejRVORvrQ5CbuuA86od3jFP58Re3cvOt6SQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOM5DHTPA35OHKTOZMMYP",
                            StaffCode = "SD1007",
                            TwoFactorEnabled = false,
                            UserName = "Vannng"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16684ed7-0d44-4cd4-89b4-348c4a1633d2",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1987, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Thang",
                            Gender = "F",
                            IsLogged = false,
                            JoinedDate = new DateTime(2016, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Viet",
                            LocationID = "HN",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "thangnv",
                            PasswordHash = "AQAAAAEAACcQAAAAEK/bZl/nWLKw4Mg1rFEHw3e9+h2JV56Zxs9Dj2rOuaMJt2ykq2pPpEkeUTRVrwIhIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOM5DETPA35OMKTOZMMYP",
                            StaffCode = "SD1008",
                            TwoFactorEnabled = false,
                            UserName = "thangnv"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a199709d-2755-43eb-ab77-4590af6e646f",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1984, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Toan",
                            Gender = "M",
                            IsLogged = false,
                            JoinedDate = new DateTime(2017, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Le Hang",
                            LocationID = "HCM",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "toanlh",
                            PasswordHash = "AQAAAAEAACcQAAAAECgIw/jyDGbs3V8NFfMDZjcUPDYal6qLx5YK3beQp9KCMu/Bd10vVYWUmpu7BDQMCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOM5DETPA35OHKTOZBMYP",
                            StaffCode = "SD1009",
                            TwoFactorEnabled = false,
                            UserName = "toanlh"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce63fede-8af9-4620-851a-b56e9f00d4d9",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1981, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Quy",
                            Gender = "M",
                            IsLogged = false,
                            JoinedDate = new DateTime(2017, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Bui Duy",
                            LocationID = "HCM",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "quybd",
                            PasswordHash = "AQAAAAEAACcQAAAAEA4jw3t+I+9leC3AKHpiaPs9HF8zuI+zNoqDVWVw+M0EogphQzPHfxKaY3GqdfABFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOM5DETPA35OHKTOZMMYP",
                            StaffCode = "SD1010",
                            TwoFactorEnabled = false,
                            UserName = "quybd"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a79ea82-888f-4077-a475-f7542183f743",
                            CreatedDate = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1986, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Phuong",
                            Gender = "F",
                            IsLogged = false,
                            JoinedDate = new DateTime(2018, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Vo Hoang",
                            LocationID = "HCM",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "phuongvh",
                            PasswordHash = "AQAAAAEAACcQAAAAEDv3AZMjNCDhWVIKNII+lJgDiDAD++mNW2q58TcF3HZx72GKBzCqU3LYMVNb/jsIHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOM5DETPA35OHKTOWMMYP",
                            StaffCode = "SD1011",
                            TwoFactorEnabled = false,
                            UserName = "phuongvh"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.User", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationID");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Location", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
